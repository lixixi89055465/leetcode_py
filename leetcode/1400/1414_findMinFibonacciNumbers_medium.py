'''
1414. 和为 K 的最少斐波那契数字数目
给你数字 k ，请你返回和为 k 的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。

斐波那契数字定义为：

F1 = 1
F2 = 1
Fn = Fn-1 + Fn-2 ， 其中 n > 2 。
数据保证对于给定的 k ，一定能找到可行解。



示例 1：

输入：k = 7
输出：2
解释：斐波那契数字为：1，1，2，3，5，8，13，……
对于 k = 7 ，我们可以得到 2 + 5 = 7 。
示例 2：

输入：k = 10
输出：2
解释：对于 k = 10 ，我们可以得到 2 + 8 = 10 。
示例 3：

输入：k = 19
输出：3
解释：对于 k = 19 ，我们可以得到 1 + 5 + 13 = 19 。


提示：

1 <= k <= 10^9
通过次数12,016提交次数18,460
'''
'''
1,1,2,3,5,8,13,21,34,55
12:3
13:1
14:2:13+1
15:2:13+2
16:2:13+3
17:3:13+4=13+3+1
18:2:13+5
19:3:13+6
20:3:13+7
21:1

33:21+12(3):4
   13+13+ 7 :4
   21+12=21+8+4=21+8+3+1
39:34+5
40:34+6=34+5+1
41:34+7=34+5+2
42:34+8=2
54:34+20

'''


class Solution:
    def findMinFibonacciNumbers(self, k: int) -> int:
        f1 = 1
        f2 = 1
        f = [f1, f2]
        while f[-1] < k:
            f.append(f[-1] + f[-2])
        i = len(f) - 1
        ans = 0
        while k > 0:
            if f[i] < k:
                k = k - f[i]
                ans += 1
            elif f[i] == k:
                return ans + 1
            i -= 1
        return ans


solve = Solution()
k = 7
k = 10
k = 19
result = solve.findMinFibonacciNumbers(k)
print(result)
