'''
动态规划问题（八）最少矩阵乘法次数
问题描述

给你一个数组，第一个元素为第一个矩阵的行数，末尾元素为最后一个矩阵的列数，中间元素为前一个矩阵的列数和后一个举证的行数。现在要将这些矩阵相乘，
要求你求出最少需要做多少次乘法才能得到结果。（矩阵的乘法满足结合律）。

​ 例如，对于输入的一个数组 {40, 20, 30, 10, 30}，表示输入的矩阵为 𝐴(10,20)、𝐵(20,30)、𝐶(30,10)、𝐷(10,30)
A ( 10 , 20 ) 、 B ( 20 , 30 ) 、 C ( 30 , 10 ) 、 D ( 10 , 30 )
，最少需要做 26000 次乘法才能得到结果，即 (A(BC))D ——> 20*30*10 + 40*20*10 + 40*10*30 = 26000。
解决思路
​ 解决该问题的方式很简单，将所有可能的结合方式一一列举出来，计算结果得到最小值即可。
递归
由于第一个元素的特殊性，因此需要特别处理一下
当只有一个元素时，无需做任何乘法操作
动态规划
这是一个存在大量重复计算的问题，因此使用动态规划来处理可以明显地提高效率

'''

arr = [40, 20, 30, 10, 30]
n = len(arr)
dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]

for l1 in range(2, n):
    for i in range(0, n - l1):
        j = i + l1
        for k in range(i, j):
            if k == i or k == i + 1:
                dp[i][k] = 0
                continue
            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + arr[i] * arr[k] * arr[j])
